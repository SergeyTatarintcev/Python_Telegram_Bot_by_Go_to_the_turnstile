import logging
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import CommandHandler, MessageHandler, filters, CallbackContext
from datetime import datetime, time
from ai_helpers import get_ai_tip_async

logger = logging.getLogger(__name__)

START_HOUR = 9
END_HOUR = 21

keyboard = [
    ['–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞', '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–∞–∂–¥—ã–µ 3 —á–∞—Å–∞'],
    ['–û—Ç–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è']
]
reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def setup_handlers(application):
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    logger.info("Handlers initialized")

async def start(update: Update, context: CallbackContext):
    chat_id = update.message.chat_id
    logger.info(f"[START] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:', reply_markup=reply_markup)

async def handle_message(update: Update, context: CallbackContext):
    user_choice = update.message.text
    chat_id = update.message.chat_id

    logger.info(f"[CHOICE] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –≤—ã–±—Ä–∞–ª: {user_choice}")

    jobs = context.job_queue.get_jobs_by_name(str(chat_id))
    if jobs:
        logger.info(f"[REMOVE JOBS] –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id} ({len(jobs)} —à—Ç.)")
    for job in jobs:
        job.schedule_removal()

    if user_choice == '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞':
        context.job_queue.run_repeating(
            reminder_job,
            interval=7200,
            first=0,
            chat_id=chat_id,
            name=str(chat_id),
            data={'interval': 2, 'tip_count': 0}
        )
        logger.info(f"[SET REMINDER] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id}: –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞")
        await update.message.reply_text('–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞ –≤–∫–ª—é—á–µ–Ω—ã!', reply_markup=reply_markup)
    elif user_choice == '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–∞–∂–¥—ã–µ 3 —á–∞—Å–∞':
        context.job_queue.run_repeating(
            reminder_job,
            interval=10800,
            first=0,
            chat_id=chat_id,
            name=str(chat_id),
            data={'interval': 3, 'tip_count': 0}
        )
        logger.info(f"[SET REMINDER] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id}: –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–∞–∂–¥—ã–µ 3 —á–∞—Å–∞")
        await update.message.reply_text('–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–∞–∂–¥—ã–µ 3 —á–∞—Å–∞ –≤–∫–ª—é—á–µ–Ω—ã!', reply_markup=reply_markup)
    elif user_choice == '–û—Ç–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è':
        logger.info(f"[DISABLE REMINDER] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –æ—Ç–∫–ª—é—á–∏–ª –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
        await update.message.reply_text('–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã.', reply_markup=reply_markup)
    else:
        logger.info(f"[UNKNOWN CHOICE] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –≤—ã–±—Ä–∞–ª –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—É—é –æ–ø—Ü–∏—é: {user_choice}")
        await update.message.reply_text('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.', reply_markup=reply_markup)

async def reminder_job(context: CallbackContext):
    now = datetime.now().time()
    chat_id = context.job.chat_id
    data = context.job.data

    if time(START_HOUR) <= now <= time(END_HOUR):
        logger.info(f"[REMINDER] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")
        await context.bot.send_message(chat_id, text="–ü–æ—Ä–∞ —Å—Ö–æ–¥–∏—Ç—å –Ω–∞ —Ç—É—Ä–Ω–∏–∫! üí™")

        tip_count = data.get('tip_count', 0)
        if tip_count % 2 == 0:
            logger.info(f"[AI TIP] –ü–æ–ª—É—á–∞–µ–º —Å–æ–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
            tip = await get_ai_tip_async()
            await context.bot.send_message(chat_id, text=f"üí° –°–æ–≤–µ—Ç—ã –ø–æ –ø–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏—è–º: {tip}")

        data['tip_count'] = tip_count + 1
        context.job.data = data
    else:
        logger.info(f"[SILENT HOURS] –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id} –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (–Ω–æ—á–Ω–æ–µ –≤—Ä–µ–º—è)")
