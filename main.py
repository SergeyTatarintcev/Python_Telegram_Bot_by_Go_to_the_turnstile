import logging
import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, PersistenceInput, PicklePersistence

# –í—Å—Ç–∞–≤—å —Å—é–¥–∞ —Å–≤–æ–π –¢–û–ö–ï–ù, –∫–æ—Ç–æ—Ä—ã–π –¥–∞–ª BotFather
TOKEN = "7665287249:AAFkiu7s3_PKajwJeUvLbQ7KNZQrvJfH4mw" # <--- –ó–ê–ú–ï–ù–ò –≠–¢–û –ù–ê –°–í–û–ô –¢–û–ö–ï–ù!!!

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è, —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å, —á—Ç–æ –¥–µ–ª–∞–µ—Ç –±–æ—Ç
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è (–∫–∞–∫–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤—ã–±—Ä–∞–Ω)
PERSISTENCE_FILE = "bot_persistence.pickle"

# –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
async def send_reminder(context: ContextTypes.DEFAULT_TYPE):
    job = context.job
    chat_id = job.chat_id
    try:
        await context.bot.send_message(chat_id=chat_id, text="üí™ –ü–æ—Ä–∞ –Ω–∞ —Ç—É—Ä–Ω–∏–∫! –í—Ä–µ–º—è –ø–æ–¥—Ç—è–≥–∏–≤–∞—Ç—å—Å—è!")
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ —á–∞—Ç {chat_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —á–∞—Ç {chat_id}: {e}")
        # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å —Ç–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞,
        # –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É, —á—Ç–æ–±—ã –Ω–µ –ø—ã—Ç–∞—Ç—å—Å—è —Å–ª–∞—Ç—å —Å–Ω–æ–≤–∞
        if "bot was blocked" in str(e).lower() or "chat not found" in str(e).lower():
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ –∏–ª–∏ —á–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É.")
            job.schedule_removal()
            # –¢–∞–∫–∂–µ –æ—á–∏—Å—Ç–∏–º user_data, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if 'reminder_interval_hours' in context.user_data:
                del context.user_data['reminder_interval_hours']


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    chat_id = update.effective_chat.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.first_name} (ID: {user.id}, Chat_ID: {chat_id}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞.")

    keyboard = [
        [InlineKeyboardButton("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞", callback_data='set_2_hours')],
        [InlineKeyboardButton("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–∞–∂–¥—ã–µ 3 —á–∞—Å–∞", callback_data='set_3_hours')],
        [InlineKeyboardButton("–û—Ç–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", callback_data='disable_reminders')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    current_interval = context.user_data.get('reminder_interval_hours')
    message_text = f"–ü—Ä–∏–≤–µ—Ç, {user.mention_html()}! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–µ –∑–∞–±—ã–≤–∞—Ç—å –ø—Ä–æ —Ç—É—Ä–Ω–∏–∫.\n"
    if current_interval:
        message_text += f"–°–µ–π—á–∞—Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞ –∫–∞–∂–¥—ã–µ {current_interval} —á–∞—Å–∞(–æ–≤)."
    else:
        message_text += "–°–µ–π—á–∞—Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã."
    message_text += "\n\n–í—ã–±–µ—Ä–∏ –æ–ø—Ü–∏—é:"

    await update.message.reply_html(message_text, reply_markup=reply_markup)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–¥–∞—á –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def remove_existing_job(chat_id: int, context: ContextTypes.DEFAULT_TYPE):
    # –ò–º—è –∑–∞–¥–∞—á–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–∞–ø—Ä–∏–º–µ—Ä, 'reminder_job_{chat_id}'
    job_name = f'reminder_job_{chat_id}'
    current_jobs = context.job_queue.get_jobs_by_name(job_name)
    if current_jobs:
        for job in current_jobs:
            job.schedule_removal()
        logger.info(f"–£–¥–∞–ª–µ–Ω—ã –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∑–∞–¥–∞—á–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è —á–∞—Ç–∞ {chat_id}")
    return job_name

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer() # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ—Å—Ç–∞–ª–∞ "–≥—Ä—É–∑–∏—Ç—å—Å—è"

    chat_id = query.message.chat_id
    action = query.data

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞—á–∏ –ø–µ—Ä–µ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π –Ω–æ–≤–æ–π
    job_name = remove_existing_job(chat_id, context)

    interval_hours = None
    message = ""

    if action == 'set_2_hours':
        interval_hours = 2
        interval_seconds = 2 * 60 * 60 # 2 —á–∞—Å–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        context.job_queue.run_repeating(send_reminder, interval=interval_seconds, first=0, chat_id=chat_id, name=job_name)
        message = "–•–æ—Ä–æ—à–æ! –ë—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞."
        logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞ –¥–ª—è —á–∞—Ç–∞ {chat_id}")
    elif action == 'set_3_hours':
        interval_hours = 3
        interval_seconds = 3 * 60 * 60 # 3 —á–∞—Å–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        context.job_queue.run_repeating(send_reminder, interval=interval_seconds, first=0, chat_id=chat_id, name=job_name)
        message = "–ü—Ä–∏–Ω—è—Ç–æ! –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–∞–∂–¥—ã–µ 3 —á–∞—Å–∞."
        logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–∞–∂–¥—ã–µ 3 —á–∞—Å–∞ –¥–ª—è —á–∞—Ç–∞ {chat_id}")
    elif action == 'disable_reminders':
        # –ó–∞–¥–∞—á–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω—ã —Ñ—É–Ω–∫—Ü–∏–µ–π remove_existing_job
        message = "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã. –ú–æ–ª–æ–¥–µ—Ü, —á—Ç–æ –∑–∞–Ω–∏–º–∞–ª—Å—è!"
        logger.info(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã –¥–ª—è —á–∞—Ç–∞ {chat_id}")
        interval_hours = None # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª —Å–±—Ä–æ—à–µ–Ω

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if interval_hours is not None:
        context.user_data['reminder_interval_hours'] = interval_hours
    elif 'reminder_interval_hours' in context.user_data:
        del context.user_data['reminder_interval_hours']

    await query.edit_message_text(text=message)


def main():
    # –°–æ–∑–¥–∞–µ–º PicklePersistence
    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Ñ–∞–π–ª–∞ –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –µ—Å–ª–∏ –Ω–µ—Ç, —Å–æ–∑–¥–∞–¥–∏–º
    persistence_dir = os.path.dirname(PERSISTENCE_FILE)
    if persistence_dir and not os.path.exists(persistence_dir):
        os.makedirs(persistence_dir, exist_ok=True)

    # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, PicklePersistence –º–æ–∂–µ—Ç –≤—ã–¥–∞—Ç—å –æ—à–∏–±–∫—É –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ,
    # –æ—Å–æ–±–µ–Ω–Ω–æ –µ—Å–ª–∏ –º—ã –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å 'user_data' –∏ —Ç.–¥. –¥–æ —Ç–æ–≥–æ, –∫–∞–∫ —á—Ç–æ-—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.
    # –ú—ã –º–æ–∂–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å PersistenceInput –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ.
    persistence = PicklePersistence(filepath=PERSISTENCE_FILE,
                                    store_data=PersistenceInput(user_data=True, chat_data=False, bot_data=False, callback_data=True))


    # –°–æ–∑–¥–∞–µ–º "–º–æ–∑–≥" –±–æ—Ç–∞
    application = Application.builder().token(TOKEN).persistence(persistence).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ –∫–Ω–æ–ø–æ–∫
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_callback))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ (–æ–Ω –Ω–∞—á–∏–Ω–∞–µ—Ç —Å–ª—É—à–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è)
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    application.run_polling()

if __name__ == "__main__":
    main()