import logging
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
from apscheduler.schedulers.background import BackgroundScheduler
from apscheduler.triggers.interval import IntervalTrigger

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TOKEN = "–¢–í–û–ô_–¢–û–ö–ï–ù_–û–¢_BOTFATHER"
CHAT_ID = None
scheduler = BackgroundScheduler()

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
keyboard = [
    ["–ù–∞–ø–æ–º–∏–Ω–∞—Ç—å –∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞"],
    ["–ù–∞–ø–æ–º–∏–Ω–∞—Ç—å –∫–∞–∂–¥—ã–µ 3 —á–∞—Å–∞"],
    ["–û—Ç–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"]
]
reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# –ù–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞
async def send_reminder(context: ContextTypes.DEFAULT_TYPE):
    await context.bot.send_message(chat_id=CHAT_ID, text="üí™ –ü–æ—Ä–∞ –Ω–∞ —Ç—É—Ä–Ω–∏–∫! üí™")

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global CHAT_ID
    CHAT_ID = update.effective_chat.id
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ç–µ–±–µ –æ —Ç—É—Ä–Ω–∏–∫–µ. –í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª:",
        reply_markup=reply_markup
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global CHAT_ID
    CHAT_ID = update.effective_chat.id
    text = update.message.text

    if text == "–ù–∞–ø–æ–º–∏–Ω–∞—Ç—å –∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞":
        scheduler.remove_all_jobs()
        scheduler.add_job(send_reminder, IntervalTrigger(hours=2), args=[context])
        await update.message.reply_text("‚úÖ –ë—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞!")

    elif text == "–ù–∞–ø–æ–º–∏–Ω–∞—Ç—å –∫–∞–∂–¥—ã–µ 3 —á–∞—Å–∞":
        scheduler.remove_all_jobs()
        scheduler.add_job(send_reminder, IntervalTrigger(hours=3), args=[context])
        await update.message.reply_text("‚úÖ –ë—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –∫–∞–∂–¥—ã–µ 3 —á–∞—Å–∞!")

    elif text == "–û—Ç–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è":
        scheduler.remove_all_jobs()
        await update.message.reply_text("‚ùå –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã.")

# main
def main():
    scheduler.start()
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_message))

    app.run_polling()

if __name__ == '__main__':
    main()