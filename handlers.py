
import logging
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import CommandHandler, MessageHandler, filters, CallbackContext
from datetime import datetime, time
from ai_helpers import get_ai_tip

logger = logging.getLogger(__name__)

START_HOUR = 9
END_HOUR = 21

keyboard = [['–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞', '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–∞–∂–¥—ã–µ 3 —á–∞—Å–∞'],
            ['–û—Ç–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è']]
reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def setup_handlers(application):
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

async def start(update: Update, context: CallbackContext):
    await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:', reply_markup=reply_markup)

async def handle_message(update: Update, context: CallbackContext):
    user_choice = update.message.text
    chat_id = update.message.chat_id

    # –û—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ —Å—Ç–∞—Ä—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    jobs = context.job_queue.get_jobs_by_name(str(chat_id))
    for job in jobs:
        job.schedule_removal()

    if user_choice == '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞':
        context.job_queue.run_repeating(reminder_job, interval=7200, first=0, chat_id=chat_id, name=str(chat_id), data={'interval': 2})
        await update.message.reply_text('–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞ –≤–∫–ª—é—á–µ–Ω—ã!', reply_markup=reply_markup)
    elif user_choice == '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–∞–∂–¥—ã–µ 3 —á–∞—Å–∞':
        context.job_queue.run_repeating(reminder_job, interval=10800, first=0, chat_id=chat_id, name=str(chat_id), data={'interval': 3})
        await update.message.reply_text('–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–∞–∂–¥—ã–µ 3 —á–∞—Å–∞ –≤–∫–ª—é—á–µ–Ω—ã!', reply_markup=reply_markup)
    elif user_choice == '–û—Ç–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è':
        await update.message.reply_text('–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã.', reply_markup=reply_markup)

# –û—Å–Ω–æ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞-–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
async def reminder_job(context: CallbackContext):
    now = datetime.now().time()
    if time(START_HOUR) <= now <= time(END_HOUR):
        chat_id = context.job.chat_id
        interval = context.job.data.get('interval', 2)

        await context.bot.send_message(chat_id, text="–ü–æ—Ä–∞ —Å—Ö–æ–¥–∏—Ç—å –Ω–∞ —Ç—É—Ä–Ω–∏–∫! üí™")

        # –°–æ–≤–µ—Ç –æ—Ç –ò–ò ‚Äì —Ä–∞–∑ –≤ 2 –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        if not hasattr(context.job, "tip_count"):
            context.job.tip_count = 0

        if context.job.tip_count % 2 == 0:
            tip = await get_ai_tip()
            await context.bot.send_message(chat_id, text=f"üí° –°–æ–≤–µ—Ç—ã –ø–æ –ø–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏—è–º: {tip}")

        context.job.tip_count += 1
